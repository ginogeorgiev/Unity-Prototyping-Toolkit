{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Unity Prototyping Toolkit","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the Unity Prototyping Toolkit documentation. This toolkit is designed to empower game developers and designers by providing a comprehensive set of tools and resources to streamline the process of creating game prototypes in Unity. Whether you're experienced looking to iterate on ideas quickly or an enthusiast eager to experiment with game concepts, this toolkit aims to enhance your prototyping experience.</p>"},{"location":"#how-to-start","title":"How to Start","text":""},{"location":"#quick-setup-installation-guide","title":"Quick Setup - Installation Guide","text":""},{"location":"#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"#modules","title":"Modules","text":"<p>Detailed information about the modules included in the Prototyping Toolkit.:</p>"},{"location":"#list-of-modules","title":"List of Modules","text":"<p>This Unity Prototyping Toolkit encompasses a range of modules designed to address specific development needs. Explore the documentation to learn more about each module and how it can contribute to your prototyping journey.</p> <p>Whether you're a solo developer, part of a team, or just eager to experiment with game ideas, the Prototyping Toolkit is here to help you bring your visions to life. Let's dive in and explore the features and functionalities that await you!</p>"},{"location":"#purpose-of-the-toolkit","title":"Purpose of the Toolkit","text":"<p>The primary purpose of the Unity Prototyping Toolkit is to address the challenges faced during the prototyping phase of game development. Traditional prototyping methods can be time-consuming and intricate, often hindering the rapid iteration and experimentation crucial for creating engaging gameplay experiences. This toolkit seeks to offer a solution by providing a range of features and modules that cater to the specific needs of developers.</p>"},{"location":"#key-benefits","title":"Key Benefits","text":"<ul> <li> <p>Accelerated Development: By providing pre-built logic and components commonly needed in game prototypes, the toolkit accelerates the process of turning ideas into interactive experiences.</p> </li> <li> <p>Clear Project Structure: The toolkit follows a domain-driven project structure, making it easier to manage and organize your project's various components.</p> </li> <li> <p>Feature Integration: Connect and establish the flow of game states and features seamlessly, promoting efficient interaction between different parts of your prototype.</p> </li> <li> <p>Decoupling Features: The toolkit encourages feature modularity, allowing you to develop and test different gameplay elements independently.</p> </li> <li> <p>Prerequisite: Basic Unity Understanding Required: To effectively utilize the toolkit, a fundamental understanding of Unity's concepts and workflows is recommended.</p> </li> <li> <p>Time Savings: Save time by leveraging the toolkit's built-in logic, allowing you to focus on the unique aspects of your prototype.</p> </li> <li> <p>Enhanced Testing: The toolkit's design facilitates efficient testing, enabling you to iterate and refine your prototype's mechanics rapidly.</p> </li> </ul>"},{"location":"#resources","title":"Resources","text":""},{"location":"#other-external-tools-used-with-this-toolkit","title":"Other external Tools used with this Toolkit","text":"<ul> <li>MyBox</li> <li>ExtendedScriptableObjectDrawer</li> <li>Cinemachine</li> <li>DoTween - not yet</li> </ul>"},{"location":"#some-other-useful-modules","title":"Some Other Useful Modules:","text":"<p>(Sometimes used to build some of this Toolkits Structure and Code)</p> <ul> <li>Events, Variables and RuntimeSets are based on the ScriptableObject Architecture of Ryan Hipple Repository, Talk</li> <li>Audio Events from Richard Fine Repository, Talk</li> <li>Pool and Factory and Audio are from the Unity open-Project Chop Chop</li> </ul>"},{"location":"Q1%20Quick%20Setup%20-%20Installation%20Guide/","title":"Quick Setup - Installation Guide","text":"<ol> <li>Create a new Unity Project or use an existing one</li> <li>Install Cinemachine (Unity Package Manger)</li> <li>Load TMP Essentials (move it to Plugins folder) </li> <li>Install Mybox</li> <li>Download PTK latest package</li> <li>Import PTK package</li> <li>Move the ScriptTemplate folder to Assets folder</li> <li>Install InputSystem (Unity Package Manger)</li> <li>Ignore Errors</li> <li>Restart Unity</li> <li>Done</li> </ol>"},{"location":"Q2%20Quick%20Start%20Guide/","title":"Quick Start Guide","text":"<p>Welcome to the Quick Start Guide for the Unity Prototyping Toolkit. In this guide, you'll find step-by-step instructions to help you get started with the toolkit's functionality. All the examples and resources mentioned here can be found in the Quick Start Guide Sample Folder.</p> <p>Our goal with the Quick Start Guide is to strike a balance between following best practices and avoiding unnecessary complexity during the early stages of development. We aim to empower you to efficiently create prototypes while maintaining a solid foundation for future enhancements.</p> <p>Let's dive into the guide and explore the features and workflows that the Unity Prototyping Toolkit offers.</p>"},{"location":"Q2%20Quick%20Start%20Guide/#what-were-implementing-in-this-guide-estimated-time-2-hours","title":"What We're Implementing in This Guide (Estimated Time: ~2 hours)","text":"<pre><code>These implementations are essential to create a simple game loop.\n</code></pre> <p>In this section, we'll outline the key components we'll be working on during the course of this guide. </p> <ol> <li>Simple Player and Camera Setup (Approx. 20 minutes)<ul> <li>Create a basic player character with planar movement controls.</li> <li>Set up an isometric camera view to provide a suitable perspective.</li> </ul> </li> <li>Player Health Control and UI Feedback (Approx. 40 minutes)<ul> <li>Implement a player health controller that triggers damage events.</li> <li>Integrate UI feedback to reflect changes in player health.</li> </ul> </li> <li>Enemy Spawning and Movement (Approx. 50 minutes)<ul> <li>Develop an enemy spawning system that generates enemies around the player.</li> <li>Configure enemies to move towards the player and pass them.</li> </ul> </li> </ol>"},{"location":"Q2%20Quick%20Start%20Guide/#bonus-implementations-estimated-time-15-hours","title":"Bonus Implementations (Estimated Time: ~1.5 hours)","text":"<pre><code>These additional implementations are beneficial for enhanced\ntesting and iteration of your prototype.\n</code></pre> <ol> <li>Player Skill for Dealing Damage (Approx. 30 minutes)<ul> <li>Introduce a skill that allows the player to deal damage to enemies in proximity.</li> <li>Provide UI feedback to indicate the skill's activation and effect.</li> </ul> </li> <li>Game Controller with States and UI (Approx. 40 minutes)<ul> <li>Create a game controller to manage different game states (start, game, end).</li> <li>Design UI elements to convey game state transitions effectively.</li> </ul> </li> <li>Audio Options and Sound Effects (Approx. 20 minutes)<ul> <li>Incorporate audio options to control sound settings.</li> <li>Implement relevant sound effects to enhance the game experience.</li> </ul> </li> </ol> <p>Feel free to refer to the accompanying video showcasing the finished game. Let's start building your prototype step by step!</p> <p></p>"},{"location":"Q2%20Quick%20Start%20Guide/#lets-get-started","title":"Lets get started","text":""},{"location":"Q2%20Quick%20Start%20Guide/#1-initial-setup","title":"1. Initial Setup","text":"<p>In this section, we'll set up the foundational elements needed for this prototype. We'll create a <code>ScriptableObject</code> named <code>GameData</code> to manage shared variables, events, and references between different features of the prototype. This can be done since this will be a single player game. The approach for a multiplayer game could be different.</p> <p>1.1 Creating the GameData ScriptableObject</p> <p>To centralize essential data and references, follow these steps:</p> <ol> <li>Create a new C# script named <code>GameData</code> and attach it to a new <code>ScriptableObject</code>. <pre><code>using UnityEngine;\n\n[CreateAssetMenu(fileName = \"GameData\", menuName = \"GameData\")]\npublic class GameData : ScriptableObject  \n{\n\n}\n</code></pre></li> <li>You can remove the <code>CreateAssetMenu</code> attribute once the <code>GameData</code> asset is created since only one instance is needed.</li> </ol> <p>1.2 Using GameData References</p> <p>In your project's scripts, you'll frequently reference the <code>GameData</code> to access shared data.</p> <p>1.3 Creating a New Scene</p> <p>Start your prototype with a clean slate. Create a new scene and name it according to your preference.</p> <p>With the initial setup in place, we're ready to begin building the individual components of this prototype. Let's move on to the next steps!</p>"},{"location":"Q2%20Quick%20Start%20Guide/#2-player-movement-and-camera-setup","title":"2. Player, Movement and Camera Setup","text":"<p>In this section, we'll work on setting up the player's character movement and camera functionality. You can either use the provided sample player or integrate your own character controller, depending on your preference.</p> <p>2.1 Integrating the Isometric Camera</p> <p>Follow these steps to integrate the isometric camera into your player character:</p> <ol> <li>Drag and drop the isometric camera prefab from <code>PrototypingToolkit/Cameras/IsometricCamera</code> into your player's hierarchy.</li> <li>Adjust the camera's target to ensure it's positioned correctly in relation to your character.</li> <li>Customize Cinemachine settings as needed to achieve your desired camera behavior.</li> </ol> <p>2.2 Setting Up Input Controls</p> <p>To enable player movement, you'll need to create an <code>InputActionMap</code> with WASD bindings for movement controls.</p> <p>2.3 Creating Player Settings</p> <p>For player settings, consider creating Variables such as <code>currentSpeed</code> and <code>maxSpeed</code> for more flexible adjustments:</p> <ol> <li>Right-click in your project, navigate to <code>Create/PrototypingToolkit/Variables/FloatVariable</code>, and name it appropriately.</li> <li>Reference the created variable in your <code>GameData</code> script. You can access its value using <code>Get()</code> and set it using <code>Set(value)</code>.</li> </ol> <p>2.4 Moving Ground Integration</p> <p>Ensure that your player has a collider component for future steps and that its tag is set to \"Player\". Implement a ground that moves along with the player's character. You can also remove the collider from the ground since we are not going to work with physics for now.</p> <p>At this point, your project, scene, and player should resemble the setup shown below: </p> <p>With the player, movement controls, and camera setup in place, we're making great progress. Let's move on to the next steps!</p>"},{"location":"Q2%20Quick%20Start%20Guide/#3-player-health-controller-with-damage-event","title":"3. Player Health Controller with Damage Event","text":"<p>In this section, we'll implement a player health system that responds to damage events and provides UI feedback for the player's health status.</p> <p>3.1 Setting Up Player Health Variables</p> <p>To create a health system, start by setting up a FloatVariable named <code>PlayerHealth_FloatVariable</code> with a start value of 100. This variable will track the player's health throughout the game.</p> <p>3.2 Creating Health Bar UI</p> <ol> <li>Add a hud canvas to your scene and include two simple images:<ul> <li>One as the background in a dark color.</li> <li>Another for the player's health bar, set to red with the Image Type set to \"Filled.\"</li> </ul> </li> </ol> <p>3.3 Implementing HealthBarUIController</p> <p>The <code>HealthBarUIController</code> script is crucial for updating the health bar UI in response to player health changes. To set this up:</p> <ol> <li>Create an EmptyEvent by right-clicking in the project and selecting <code>Create/PrototypingToolkit/Events/EmptyEvent.</code> Name it <code>PlayerHealthChanged_EmptyEvent</code> and attach it to the <code>PlayerHealth_FloatVariable.</code></li> <li>Implement the <code>HealthBarUIController</code> script as follows: <pre><code>public class HealthBarUIController : MonoBehaviour  \n{  \n    [Header(\"Game Data\")]  \n    [SerializeField] private GameData gameData;  \n\n    [Header(\"Internal Refs\")]  \n    [SerializeField] private Image bar;  \n\n    [Header(\"Debug\")]  \n    [SerializeField] private float targetFillAmount;  \n\n    private void OnEnable()  \n    {  \n        gameData.PlayerHealth.OnCurrentChanged\n        .Register(OnPlayerHealthChanged);  \n\n        OnPlayerHealthChanged();  \n    }  \n\n    private void OnDisable()  \n    {  \n        gameData.PlayerHealth.OnCurrentChanged\n        .Unregister(OnPlayerHealthChanged); \n    }  \n\n    private void OnPlayerHealthChanged()  \n    {  \n        targetFillAmount =\n        gameData.PlayerCurrentHealth.Get() / gameData.PlayerCurrentHealth.StartValue;  \n        bar.fillAmount = targetFillAmount;  \n    }  \n}\n</code></pre></li> </ol> <p>3.4 Introducing Player Damage Interaction</p> <p>Simulating player damage involves adding an <code>OnTriggerEnter</code> method to the player's collider. This method raises the <code>DealDamageToPlayer_EmptyEvent</code> when a triggering object enters: <pre><code>public class Damageable : MonoBehaviour  \n{  \n    [Header(\"Data\")]  \n    [SerializeField] private GameData gameData;  \n\n    private void OnTriggerEnter(Collider other)  \n    {  \n        if (other.CompareTag(\"Player\")) return;  \n\n        gameData.DealDamageToPlayer.Raise();  \n    }  \n}\n</code></pre></p> <p>3.5 Implementing the Health Controller</p> <p>The <code>HealthController</code> script manages player health manipulation. It performs the following: - Subtracts the specified damage amount from the player's health. <pre><code>public class HealthController : MonoBehaviour  \n{  \n    [Header(\"Data\")]  \n    [SerializeField] private GameData gameData;  \n\n    private void OnEnable()  \n    {  \n        gameData.DealDamageToPlayer.Register(OnDamageToPlayer);  \n    }  \n\n    private void OnDisable()  \n    {  \n        gameData.DealDamageToPlayer.Unregister(OnDamageToPlayer);  \n    }  \n\n    private void OnDamageToPlayer()  \n    {  \n        gameData.PlayerCurrentHealth.AddToCurrent( -10 );  \n    }  \n}\n</code></pre> Later on we will introduce a FloatVariable for the damage amount.</p> <p>3.6 Testing the Health System</p> <p>For testing purposes, a button method has been added to <code>GameData</code> to simulate player damage during runtime: <pre><code>[ButtonMethod]  \nprivate void DamagePlayerTest()  \n{  \n    DealDamageToPlayer.Raise();  \n}\n</code></pre></p> <p>With the player health controller and damage events set up, your game prototype is becoming more interactive and engaging. In the next section, we'll delve into enemy spawning and interactions to further enhance the game loop.</p>"},{"location":"Q2%20Quick%20Start%20Guide/#4-enemies-and-enemyspawner","title":"4. Enemies and EnemySpawner","text":"<p>To introduce enemies into your game loop, follow these steps:</p> <p>4.1 Creating the Enemy Prefab</p> <ol> <li>Create a new model with a collider, similar to the player's setup.</li> <li>Design the enemy with distinct materials and colors to differentiate it from the player.</li> <li>Establish essential Variables for the enemy, such as <code>movementSpeed</code> and <code>damage</code>. The damage value can now be integrated into the player's <code>HealthController</code>.</li> </ol> <p>4.2 Enemy Movement Towards the Player</p> <ol> <li>Implement the enemy's movement logic to make them walk towards and pass the player. Utilize the <code>Update</code> method for this behavior.</li> <li>To avoid direct player references in the enemy scripts, add the Player Transform to the <code>GameData</code> during the player's <code>Awake</code> method. This way, the enemies can access the player's position in <code>OnEnable</code> via the <code>GameData</code> without direct coupling.</li> </ol> <p>4.3 Creating the EnemySpawner</p> <ol> <li>Construct an EnemySpawner GameObject nested within the player to facilitate enemy spawning.</li> <li>Define necessary Variables within the EnemySpawner for <code>spawnRadius</code>, <code>deSpawnRadius</code>, and <code>spawnRate</code>.<ul> <li>Ensure that the <code>deSpawnRadius</code> value exceeds the <code>spawnRadius</code> to enable proper despawning behavior.</li> </ul> </li> <li>Develop a coroutine within the EnemySpawner that generates enemies at random positions within the specified <code>spawnRadius</code>. Control the spawning rate using the <code>spawnRate</code> variable.</li> <li>Attach a collider component to the EnemySpawner GameObject and implement <code>OnTriggerExit</code>. This function will handle enemy despawning when they move beyond the <code>deSpawnRadius</code>.</li> <li>Note: The EnemySpawner, being part of the player, should also be tagged with \"Player\" to ensure consistent behavior.</li> </ol> <p>With these steps completed, you've successfully established the basic game loop. The game is now playable, and enemies are actively engaging with the player. The subsequent sections will delve into adding more features and enhancements to your prototype.</p>"},{"location":"Q2%20Quick%20Start%20Guide/#lets-add-more","title":"Lets add more","text":""},{"location":"Q2%20Quick%20Start%20Guide/#5-a-skill-to-deal-damage-to-enemies-with-ui-feedback","title":"5. A skill to deal damage to enemies with UI feedback","text":"<p>For this we create a new prefab that sits inside the player - it need a Rigidbody (because it handles its own collisions with the enemies) and the \"Player\" tag so that it does not collide with the player - it needs a collider in a child and some sort of visual in our case its a sprite on the ground     - the collider will destroy enemies in OnTriggerEnter - we also need a new inputAction to use the skill, so it needs to be added to the InputActionMap - and we add some Variables to the GameData for settings like coolDown and curCoolDown It could look like this: <pre><code>public class DamageSkillController : MonoBehaviour  \n{  \n   [Header(\"Data\")]  \n   [SerializeField] private GameData gameData;  \n\n   [Header(\"Internal Ref\")]  \n   [SerializeField] private GameObject damageCollider;  \n\n   [Header(\"Debug\")]  \n   [SerializeField] private bool isPressed;  \n\n   private void OnEnable()  \n   {  \n      gameData.SkillInput.action.Enable();  \n\n      gameData.SkillInput.action.started += OnSkillInput;  \n      gameData.SkillInput.action.canceled += OnSkillInput;  \n\n      damageCollider.SetActive(false);  \n   }  \n\n   private void OnDisable()  \n   {  \n      gameData.SkillInput.action.started -= OnSkillInput;  \n      gameData.SkillInput.action.canceled -= OnSkillInput;  \n\n      gameData.SkillInput.action.Disable();  \n   }  \n\n   private void OnSkillInput(InputAction.CallbackContext context)  \n   {  \n      isPressed = context.started;  \n   }  \n\n   private void Update()  \n   {  \n      if (gameData.CurCoolDown.Get() &gt; 0)  \n      {  \n         gameData.CurCoolDown.AddToCurrent(- Time.deltaTime);  \n      }  \n      else if (isPressed)  \n      {  \n         DoSkill();  \n      }  \n   }  \n\n   private void DoSkill()  \n   {  \n      if (!(gameData.CurCoolDown.Get() &lt;= 0)) return;  \n\n      StartCoroutine(DealDamage());  \n   }  \n\n   private IEnumerator DealDamage()  \n   {  \n      damageCollider.SetActive(true);  \n      RefreshCoolDown();  \n\n      yield return new WaitForSeconds(gameData.SkillActiveTime.Get());  \n\n      damageCollider.SetActive(false);  \n   }  \n\n   private void RefreshCoolDown()  \n   {  \n      gameData.CurCoolDown.Set(gameData.SkillCoolDown.Get());  \n   }  \n}\n</code></pre></p> <p>Next we need another filled image in our hud that will indicate weather our skill is on coolDown or not - for that we check in the Update method if the curCoolDown is lower or the same as the coolDown and set the fillAmount respectively</p>"},{"location":"Q2%20Quick%20Start%20Guide/#6-gamecontroller-with-ui","title":"6. GameController with UI","text":"<p>For this we need a GameController inheriting form StateMachine - it need the StartState GameState and EndState - will instantiate them initialize with the StartState and will then react to events in order to trigger state transitions - it will hold all the necessary scene references in order to give them to the states - these states will than handle logic in their Enter and Exit methods in order to represent the state properly</p> <p>We also need two new canvases - a start canvas which will have some Information about the rules and a start button - a end canvas with a restart button - the buttons will trigger events which will be handled by the GameController</p> <p>We also need a container for the enemies that can be cleared on state transitions The GameController could look like this: <pre><code>[DefaultExecutionOrder(-10)]  \npublic class GameController : StateMachine  \n{  \n   [Header(\"Data\")]  \n   [SerializeField] private GameData gameData;  \n\n   [Header(\"Scene Refs\")]  \n   [SerializeField] private GameObject player;  \n   [SerializeField] private EnemyContainerController enemyContainerController;  \n\n   [SerializeField] private GameObject hud;  \n   [SerializeField] private GameObject startScreen;  \n   [SerializeField] private GameObject endScreen;  \n\n   private StartState startState;  \n   private GameState gameState;  \n   private EndState endState;  \n\n   private void Awake()  \n   {  \n      player.SetActive(false);  \n      enemyContainerController.gameObject.SetActive(false);  \n      hud.SetActive(false);  \n      endScreen.SetActive(false);  \n\n      gameData.ReStart.Register(EnterStartState);  \n      gameData.GameStart.Register(EnterGameState);  \n      gameData.GameOver.Register(EnterEndState);  \n\n      startState = new StartState(gameData, startScreen);  \n      gameState = new GameState(gameData, player,\n                                  enemyContainerController, hud, startScreen);  \n      endState = new EndState(gameData, endScreen);  \n\n      Initialize(startState);  \n   }  \n\n   [ButtonMethod]  \n   private void EnterStartState()  \n   {  \n      if (currentStateSO.Get() is not StartState) TransitionTo(startState);  \n   }  \n\n   [ButtonMethod]  \n   private void EnterGameState()  \n   {  \n      if (currentStateSO.Get() is not GameState) TransitionTo(gameState);  \n   }  \n\n   [ButtonMethod]  \n   private void EnterEndState()  \n   {  \n      if (currentStateSO.Get() is not EndState) TransitionTo(endState);  \n   }  \n}\n</code></pre></p>"},{"location":"Q2%20Quick%20Start%20Guide/#7-sounds-and-audio-options","title":"7. Sounds and audio options","text":"<p>For that we to get some Sounds. We can take some free sounds from Kenny Lets add some sounds for the start button, the dealDamageToPlayer event, the skill and for game over. First lets add an AudioManager to your scene - PrototypingToolkit/Audio/Prefabs/AudioManager - also right-click in the hierarchy under PrototypingToolkit/AudioManager</p> <p>Ceate Audio Event Data for each Sound - set the corresponding mixer group - add the audio files to the Audio Clips List - adjust Volume and pitch</p> <p>There a two ways to raise audio events with audio event data - either in the inspector with unity events and the Play AudioEvent - or via code by referencing the audio event data, raising it and sending the sound with it</p> <p>As an example we can create an empty GameObject add a EmptyEventListener and react to the \"DealDamageToPlayer_EmptyEvent\" and add the Play AudioEvent and our created Audio Event Data with the corresponding sound(s)</p> <p>A more convenient way would be to raise them where they happen (for example in the HealthController) <pre><code>private void OnDamageToPlayer()  \n{  \n    gameData.PlayerHealth.AddToCurrent(-gameData.EnemyDamage.Get());  \n    gameData.AudioData.PlayAudioEvent.Raise(gameData.BumpSound);  \n\n    if (gameData.PlayerHealth.Get() &lt;= 0)  \n    {  \n        gameData.GameOver.Raise();  \n        gameData.AudioData.PlayAudioEvent.Raise(gameData.GameOverSound);  \n    }  \n}\n</code></pre></p> <p>Another thing we need to do is add some Audio Options  For that we need two things:</p> <p>We need to add an Audio_slider to our start canvas - PrototypingToolkit/Options/Audio/Prefabs/Audio_Slider - reference the Sound_VolumeFloatVariable</p> <p>And we have to add the AudioDataManager to our scene - PrototypingToolkit/Audio/Prefabs/AudioDataManager - also right-click in the hierarchy under PrototypingToolkit/AudioDataManager</p> <p>And that is it now we have a prototype on which we can iterate on.</p>"},{"location":"Q2%20Quick%20Start%20Guide/#now-its-your-turn","title":"Now its your turn:","text":"<pre><code>Add some extras to learn more about PTK,\nand improve your playtesting environment:\n</code></pre> <ul> <li>Add a timer and an indicator that shows how many enemies you have surpassed</li> <li>Add more visuals to give better feedback for player movement</li> <li>Add an Input rebind menu for the player controls</li> <li>Add another skill (a dash perhaps)</li> <li>Add a progression which changes the enemy spawn rate over time</li> <li>Try out different cameras and see how gameplay changes</li> </ul>"},{"location":"Q4%20List%20of%20Modules/","title":"List of Modules","text":"Modules Description Audio - Audio Manager Manages audio events and playback. - Audio Data Stores audio-related data. - Audio Event Data The Data (clips &amp; settings) send with an Audio Event Cameras - First Person Camera Cinemachine with first-person view. - Isometric Camera Cinemachine with isometric camera perspective - RTS Camera Cinemachine with Settings for real-time strategy camera view - SideScroller Cinemachine for side-scrolling camera view - Third Person Camera Cinemachine for third-person camera view - Top Down Camera Cinemachine for top-down camera perspective Options - Audio Options Manages audio-related settings. - Controls Options Handles control-related settings. Art Simple Prototyping Materials - 3D-Assets A collection of 3D Models, Prefabs and Materials Core - Command Logic Implemented pattern to use Commands - Domain Logic To categorize events (later more) by features and make them loggable and describable - Editor Tools - - Attributes - - - Better Tooltip Indicates if a Tooltip is there in the inspector - - Extended ScriptableObject Drawer Makes SOs expandable when referenced in inspector - - [[Tools Menu]] Add PTK tool menu to create a Feature Folder (later more) - - Extensions - - - Unity Extensions Some Extensions for Unity Types - - - Wait Until UnityEvent Coroutine addition (not yet finished) - - Frame Rate Handler Can be used to set frame rate limits - - Menu Names PTK internal Menu Names for all internal SOs - Events - - Data Event Are Events that sends data on raise - - Empty Event Are simple Events without sending data - - Empty Event Listener Inspectable Listener for Empty Events - - Event Base To define Events and reference them under a common type - - Event Hub Hub for all events sorted by feature domain - Factory Implemented pattern to use Factories - Pool Implemented pattern to use Pools - Runtime Set Maintains dynamic object sets. - Selection Allows to set selections of various types - State Logic Implemented pattern to use States and StateMachines - Variables Allows to set and share simple Data Script Templates A List of Script Templates for modification and PTC classes Samples They show how some of the modules can be used or implemented - Camera Sample - Events Sample - Game Controller Sample - Option Sample - Runtime Set Sample - Sample Player - Empty Scene A Template Scene, but more important a Scene to switch when pulling with git to prevent problems"},{"location":"Core%20Modules/Command%20Logic/","title":"Command Logic","text":"<p>Simple implementation of commands.</p> <p>Can be used to:</p> <ul> <li>push commands</li> <li>undo commands</li> <li>redo commands</li> <li>execute commands</li> </ul> <p>-- work in progress --</p>"},{"location":"Core%20Modules/Domain%20Logic/","title":"Feature Domain","text":"<p>Feature domains are here to help you categorize your ScriptableObjects into Domains.</p> <p>The only use case is the Event Hub for now.</p>"},{"location":"Core%20Modules/Domain%20Logic/#1-create-your-own-feature-domain","title":"1. Create your own Feature Domain","text":""},{"location":"Core%20Modules/Domain%20Logic/#2-name-it","title":"2. Name it","text":""},{"location":"Core%20Modules/Domain%20Logic/#3-reference-it-where-needed","title":"3. Reference it where needed","text":"<p>When creating a new FeatureScriptableObject like Empty Event you can set the Domain.</p>"},{"location":"Core%20Modules/Factory/","title":"Factory","text":"<p>Simple implementation of a factory.</p> <p>Can be used to:</p> <ul> <li>create objects</li> </ul> <p>-- work in progress --</p>"},{"location":"Core%20Modules/Pool/","title":"Pool","text":"<p>Simple implementation of a pool.</p> <p>Can be used to:</p> <ul> <li>pool objects</li> </ul> <p>-- work in progress --</p>"},{"location":"Core%20Modules/Runtime%20Set/","title":"Runtime Set","text":"<p>The RuntimeSet is a versatile class that allows you to create and manage collections of items at runtime. It provides methods for adding and removing items, as well as accessing the items for further processing.</p>"},{"location":"Core%20Modules/Runtime%20Set/#1-create-your-own-runtimeset-class","title":"1. Create your own RuntimeSet Class","text":"<p>To create your own RuntimeSet script, follow these steps:</p> <ol> <li>In the Unity Editor, right-click in the Project window or within a desired folder.</li> <li>Select \"Create\" and navigate to \"C# Scripts/RuntimeSet\" to create a new RuntimeSet script.</li> <li>Provide a meaningful name for your RuntimeSet</li> </ol> <p></p>"},{"location":"Core%20Modules/Runtime%20Set/#2-adjust-the-class","title":"2. Adjust the class","text":"<p>Make sure to adjust the namespace, menu name, and filename to match your project's structure and naming conventions. Also, replace <code>Something</code> with the actual type you want to store in the RuntimeSet.</p> <pre><code>using UnityEngine;  \nusing PrototypingToolkit.Core.Logic.RuntimeSet; \n\nnamespace Logic\n{  \n   [CreateAssetMenu(\n   fileName = \"SomerunetimeSet\",\n   menuName = \"FEATURENAME/SomerunetimeSet\")]\n   public class SomeRunetimeSet : RuntimeSet&lt;Something&gt; { }\n}\n</code></pre>"},{"location":"Core%20Modules/Runtime%20Set/#3-create-your-runtimeset-asset","title":"3. Create your RuntimeSet Asset","text":"<p>To create your own RuntimeSet asset, follow these steps:</p> <ol> <li>In the Unity Editor, right-click in the Project window or within a desired folder.</li> <li>Select \"Create\" and navigate to \"FEATURENAME/RuntimeSet\" to create a new RuntimeSet asset.</li> <li>Provide a meaningful name for your RuntimeSet </li> </ol>"},{"location":"Core%20Modules/Runtime%20Set/#4-how-to-use-the-runtimeset","title":"4. How to use the RuntimeSet","text":"<ul> <li>Reference the RuntimeSet </li> <li>Let Items add themselves OnEnable</li> <li>Let Items remove themselves OnDisable or OnDestroy based on your needs</li> </ul> <pre><code>public class SomeClass\n{\n    [SerializeField] private SomeRuntimeSet someRuntimeSet;  \n\n    private void OnEnable()\n    {  \n       someRuntimeSet.Add(this);  \n    } \n\n    private void OnDisable()\n    {  \n       someRuntimeSet.Remove(this);\n    } \n\n    private void OnDestroy()\n    {  \n       someRuntimeSet.Remove(this);\n    }\n}\n</code></pre>"},{"location":"Core%20Modules/Runtime%20Set/#5-do-something-with-the-runtimeset-items","title":"5. Do something with the RuntimeSet Items","text":"<p>To perform operations on the items stored in the RuntimeSet, follow these steps:</p> <ul> <li>Reference the RuntimeSet in the script where you want to use the items.</li> <li>Use the <code>GetItems</code> method to retrieve the collection of items from the RuntimeSet.</li> <li>Iterate through the items and perform the desired logic.</li> </ul> <pre><code>[SerializeField] private SomeRuntimeSet someRuntimeSet;\n\nprivate void DoSomething()\n{\n    foreach (Something something in someRuntimeSet.GetItems())\n    {\n       // Add Logic here\n    }\n}\n</code></pre>"},{"location":"Core%20Modules/Selection/","title":"Selection","text":"<p>The RuntimeSet is a versatile class that allows you to ...</p>"},{"location":"Core%20Modules/Selection/#1-create-your-own-selection-class","title":"1. Create your own Selection Class","text":"<p>To create your own Selection script, follow these steps:</p> <ol> <li>In the Unity Editor, right-click in the Project window or within a desired folder.</li> <li>Select \"Create\" and navigate to \"C# Scripts/Selection\" to create a new Selection script.</li> <li>Provide a meaningful name for your Selection</li> </ol> <p></p>"},{"location":"Core%20Modules/Selection/#2-adjust-the-class","title":"2. Adjust the class","text":"<p>Make sure to adjust the namespace, menu name, and filename to match your project's structure and naming conventions. Also, replace <code>Something</code> with the actual type you want to store in the Selection.</p> <pre><code>namespace Logic  \n{  \n   [CreateAssetMenu(\n   fileName = \"newSomeSelection\",\n   menuName = \"FEATURENAME/SomeSelection\")]  \n   public class SomeSelection : Selection&lt;Something&gt; {    }  \n}\n</code></pre>"},{"location":"Core%20Modules/Selection/#3-create-your-selection-asset","title":"3. Create your Selection Asset","text":"<p>To create your own Selection asset, follow these steps:</p> <ol> <li>In the Unity Editor, right-click in the Project window or within a desired folder.</li> <li>Select \"Create\" and navigate to \"FEATURENAME/Selection\" to create a new Selection asset.</li> <li>Provide a meaningful name for your Selection</li> </ol>"},{"location":"Core%20Modules/Selection/#4-how-to-use-the-selection","title":"4. How to use the Selection","text":"<ul> <li>Reference the Selection </li> <li>Set a Selection</li> </ul> <pre><code>public class Something : MonoBehaviour\n{\n    [SerializeField] private SomeSelection someSelection;  \n\n    private void OnClick()\n    {\n        someSelection.Set(this);\n    }\n}\n</code></pre>"},{"location":"Core%20Modules/Selection/#5-use-the-selection","title":"5. Use the Selection","text":"<ul> <li>Reference the Selection </li> <li>Get a Selection</li> </ul> <pre><code>public class SomeBehaviour : MonoBehaviour\n{\n    [SerializeField] private SomeSelectionChangedEvent someSelectionEvent;\n\n    private void OnEnable()\n    {  \n       someSelectionEvent.Register(OnSelectionChanged);  \n    }\n\n    private void OnDisable()\n    {  \n       someSelectionEvent.Unregister(OnSelectionChanged);  \n    }\n\n    private void OnSelectionChanged()\n    {\n        Something something = someSelection.Get();\n        if (something != null)\n        {\n        // Add Logic here\n        }\n    }\n}\n</code></pre>"},{"location":"Core%20Modules/Selection/#api","title":"API","text":"<p>The following public methods are available for working with selections:</p> Public Methods Description Parameter OnCurrentChanged Getter/setter for the callback event raised when the selection is changed. - Get Retrieves the current object of the selection. - Set Sets the current object of the selection. T value Restore Sets the current object of the selection to its default. -"},{"location":"Core%20Modules/State%20Logic/","title":"State Logic","text":"<p>The state logic allows you to create state-driven behavior in your application. By deriving from the StateMachine class and implementing custom state classes derived from BaseState, you can control the flow and execution of different states based on events or inputs.</p> <p>A Class can derive from StateMachine in order to be state driven and decides whether a State is changed or not based on Events or Inputs and communicates it to the StateMachine and if it does it provides a new State (Object derived from BaseState). Those Objects have to be created on its own based on the available states and must implement BaseState!</p>"},{"location":"Core%20Modules/State%20Logic/#1-create-a-new-state","title":"1. Create a new State","text":""},{"location":"Core%20Modules/State%20Logic/#2-adjust-the-state-class","title":"2. Adjust the State Class","text":"<ul> <li>Adjust namespace</li> <li>Adjust <code>HasNextState()</code> and define what are valid next states</li> <li>Fill <code>OnEnter()</code>, <code>OnExecute()</code>, <code>OnFixedExecute()</code> and <code>OnExit()</code> with your logic or remove then when not needed</li> <li>Create fields and set them in the Constructor and add them as parameters</li> </ul> <pre><code>namespace Logic  \n{  \n    public class SomeState : BaseState  \n    {  \n        public SomeState()  \n        {  \n        }  \n\n        protected override void OnEnter()  \n        {  \n           // add logic here  \n        }\n\n        internal override void Execute()  \n        {  \n           // add logic here    \n        }\n\n        internal override void FixedExecute()  \n        {  \n           // add logic here    \n        }  \n\n        protected override void OnExit()  \n        {  \n           // add logic here  \n        }  \n\n        public override bool HasNextState(BaseState nextState)  \n        {  \n            // return nextState.GetType() == typeof(SomeState);  \n            return false;  \n        }  \n    }  \n}\n</code></pre>"},{"location":"Core%20Modules/State%20Logic/#3-create-a-new-statemachine","title":"3. Create a new StateMachine","text":"<ul> <li>Make any Class and let it derive from StateMachine instead of Monobehaviour</li> <li>Add states as fields</li> <li>Use <code>TransitionTo</code> with a State as parameter when needed</li> </ul> <pre><code>namespace Logic  \n{  \n    public class SomeStateMachine : StateMachine  \n    {  \n        private SomeState someState;\n        private SomeOtherState someOtherState;\n\n        private void Awake()  \n        {\n            someState = new SomeState();\n            someOtherState = new SomeOtherState();\n\n            Initialize(someState);\n        }\n\n        private void ChangeStateTo(BaseState state)\n        {\n            if (currentStateSO.currentState is not state)\n            {\n                TransitionTo(state);\n            }\n        }\n    }  \n}\n</code></pre> <p>You can also use the Script Templates for States and StateMachine.</p>"},{"location":"Core%20Modules/Variables/","title":"Variables","text":"<p>Variables are atomic representations of either primitive or Unity types. They provide a way to store and share data between features, promoting decoupling and modularity in your project.</p> <p>You can also Create your own Variables by looking at the examples.</p>"},{"location":"Core%20Modules/Variables/#1-create-a-variable-in-the-editor","title":"1. Create a Variable in the Editor","text":"<p>To create a variable, follow these steps:</p> <ol> <li>In the Unity Editor, right-click in the Project window or within a desired folder.</li> <li>Select \"Create\" and navigate to \"Variables\" to create a new variable asset.</li> <li>Give the variable a meaningful name and configure its initial values and settings.</li> </ol> <p></p>"},{"location":"Core%20Modules/Variables/#2-adjust-values-in-the-editor","title":"2. Adjust Values in the Editor","text":"<p>Once the variable is created, you can adjust its values and settings in the Inspector.</p> <p></p> <ul> <li>The <code>Start Value</code> needs to be set in the Inspector and will be copied to the \"Current Value\" at runtime. Changing it at runtime will have no effect.</li> <li>The <code>Current Value</code> represents the actual value of the variable during runtime. It can be modified at runtime for testing purposes or to reflect dynamic changes in your project.</li> <li>The <code>On Current Changed</code> event is optional and can be used to define a callback that will be invoked when the \"Current Value\" is changed. </li> </ul>"},{"location":"Core%20Modules/Variables/#3-how-to-use-the-variable","title":"3. How to use the Variable","text":"<pre><code>public class Something : MonoBehaviour\n{\n    [SerializeField] private FloatVariable someVariable;  \n\n    private void DoSomething()\n    {\n        someVariable.Set(10);\n    }\n}\n</code></pre>"},{"location":"Core%20Modules/Variables/#4-use-the-variable","title":"4. Use the Variable","text":"<pre><code>public class Something : MonoBehaviour\n{\n    [SerializeField] private FloatVariable someVariable;  \n\n    private void DoSomething()\n    {\n        Some some = someVariable.Get();\n    }\n}\n</code></pre>"},{"location":"Core%20Modules/Variables/#api","title":"API","text":"<p>The following public methods are available for working with variables:</p> Public Methods Description Parameter StartValue Getter/setter for the start value of the variable. - OnCurrentChanged Getter/setter for the callback event raised when the \"Current Value\" is changed. - Get Retrieves the current value of the variable. - Set Sets the current value of the variable. T value, bool raiseChangedEvent = true Restore Sets the current value of the variable to its start value. bool raiseChangedEvent = false <p>Use these methods/properties to access and manipulate the variable's values as needed in your code.</p>"},{"location":"Core%20Modules/Editor%20Tools/Frame%20Rate%20Handler/","title":"Frame Rate Handler","text":"<p>Drag and drop the prefab into your scene and limit the frame rate in the settings.</p> <p>-- work in progress --</p>"},{"location":"Core%20Modules/Editor%20Tools/Attributes/Better%20Tooltip/","title":"Better Tooltip","text":""},{"location":"Core%20Modules/Editor%20Tools/Attributes/Better%20Tooltip/#bettertooltip-attribute","title":"BetterTooltip Attribute","text":"<p>The BetterTooltip attribute enhances the functionality of the standard Tooltip attribute in Unity by providing a visual indicator to indicate the presence of a tooltip in the inspector. This can help improve the clarity and accessibility of tooltips for your serialized fields.</p>"},{"location":"Core%20Modules/Editor%20Tools/Attributes/Better%20Tooltip/#why-use-bettertooltip","title":"Why use BetterTooltip?","text":"<p>The standard Tooltip attribute in Unity does not provide a visual indicator to show whether a tooltip is present or not. With the BetterTooltip attribute, an icon is always displayed next to fields that have a tooltip, making it easier for developers to identify and utilize tooltips in the inspector.</p>"},{"location":"Core%20Modules/Editor%20Tools/Attributes/Better%20Tooltip/#how-to-use-bettertooltip","title":"How to use BetterTooltip","text":"<p>To use the BetterTooltip attribute, follow the steps below:</p> <ol> <li>Attach the BetterTooltip attribute to the desired serialized field.</li> <li>Provide the tooltip text as a parameter within the attribute.</li> </ol> <p>Here's an example of how to use the BetterTooltip attribute:</p> <pre><code>[BetterTooltip(\"Some tooltip about some value\")]\n[SerializeField] private float someValue;\n</code></pre> <p>In the inspector, a tooltip icon will be displayed next to the field, indicating the presence of the tooltip.</p>"},{"location":"Core%20Modules/Editor%20Tools/Attributes/Better%20Tooltip/#result","title":"Result","text":"<p>The usage of the BetterTooltip attribute produces the following result in the inspector:</p> <p></p> <p>The tooltip icon next to the serialized field indicates that a tooltip is available. Hovering over the icon will display the tooltip text, providing additional information or context about the field.</p>"},{"location":"Core%20Modules/Editor%20Tools/Extensions/Unity%20Extensions/","title":"Unity Extensions","text":"<p>Some unity extensions</p> <p>-- work in progress --</p>"},{"location":"Core%20Modules/Editor%20Tools/Extensions/Wait%20Until%20UnityEvent/","title":"Wait Until UnityEvent","text":"<p>Simple Coroutine Wait until Unity event extension.</p> <p>-- work in progress --</p>"},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20DataEvent/","title":"Create your own typed DataEvent","text":""},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20DataEvent/#create-your-own-typed-data-event","title":"Create your own typed Data Event","text":""},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20DataEvent/#see-also-create-your-own-typed-emptyevent","title":"See also: Create your own typed EmptyEvent","text":"<ul> <li>This is mandatory if you want to send you own data with Events</li> <li>This can either be useful to have separate Eventgroups or even a single Type for every Event in you game to distinguish them and make them easier to find debug and maintain.</li> </ul>"},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20DataEvent/#1-create-a-new-dataevent-script","title":"1. Create a new DataEvent Script","text":"<ul> <li>Right-click in the Project hierarchy and choose Create/Create/C# Script/DataEvent</li> </ul>"},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20DataEvent/#2-adjust-the-namespace-menu-and-filename-as-well-as-the-type","title":"2. Adjust the namespace, menu- and filename as well as the type","text":"<pre><code>using UnityEngine;  \nusing PrototypingToolkit.Core.Logic.Event;  \n\nnamespace Logic\n{  \n   [CreateAssetMenu(\n   fileName = \"SomeDataEvent\",\n   menuName = \"FEATURENAME/SomeDataEvent\")]\n   public class SomeEvent : DataEvent&lt;Something&gt; { }  \n}\n</code></pre>"},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20DataEvent/#3-create-the-asset-for-the-event-if-needed","title":"3. Create the asset for the Event if needed","text":""},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20EmptyEvent/","title":"Create your own typed EmptyEvent","text":""},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20EmptyEvent/#create-your-own-typed-empty-event","title":"Create your own typed Empty Event","text":""},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20EmptyEvent/#see-also-create-your-own-typed-dataevent","title":"See also: Create your own typed DataEvent","text":"<ul> <li>This is not mandatory and takes some extra work.</li> <li>This can either be useful to have separate Eventgroups or even a single Type for every Event in you game to distinguish them and make them easier to find debug and maintain.</li> </ul>"},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20EmptyEvent/#1-create-a-new-emptyevent-script","title":"1. Create a new EmptyEvent Script","text":"<ul> <li>Right-click in the Project hierarchy and choose Create/C# Script/EmptyEvent</li> </ul>"},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20EmptyEvent/#2-adjust-the-namespace-menu-and-filename","title":"2. Adjust the namespace, menu- and filename","text":"<pre><code>using UnityEngine;  \nusing PrototypingToolkit.Core.Logic.Event;  \n\nnamespace Logic  \n{  \n   [CreateAssetMenu(fileName = \"SomeEvent\", menuName = \"FEATURENAME/SomeEvent\")]  \n   public class SomeEvent : EmptyEvent { }  \n}\n</code></pre>"},{"location":"Core%20Modules/Events/Create%20your%20own%20typed%20EmptyEvent/#3-create-the-asset-for-the-event-if-needed","title":"3. Create the asset for the Event if needed","text":""},{"location":"Core%20Modules/Events/Data%20Event/","title":"Data Event","text":"<p>DataEvents are a powerful mechanism in your project that allow you to send events along with associated data at runtime. With DataEvents, you can easily notify other systems, objects, or scripts about specific occurrences and provide them with relevant information. These events can be listened to and reacted to in code, enabling seamless communication and coordination between different parts of your project. Whether you need to trigger actions, update UI elements, or synchronize data between systems, DataEvents provide a flexible and efficient solution. This documentation will guide you through the process of creating, configuring, and using DataEvents effectively in your project.</p>"},{"location":"Core%20Modules/Events/Data%20Event/#how-to-create-and-use-dataevents","title":"How to create and use DataEvents.","text":""},{"location":"Core%20Modules/Events/Data%20Event/#1-create-a-dataevent-script","title":"1. Create a DataEvent Script","text":"<p>See: Create your own typed DataEvent</p>"},{"location":"Core%20Modules/Events/Data%20Event/#2-name-the-event","title":"2. Name The Event","text":""},{"location":"Core%20Modules/Events/Data%20Event/#3-set-up-the-event","title":"3. Set Up the Event","text":"<ul> <li>Choose a Domain Logic if needed</li> </ul> <ul> <li>The List in the Debug area will fill at runtime if there are any Listeners, this way they can be found in the Scene-Hierarchy</li> <li>The Event can also be raised at runtime for testing purposes, but the right object needs to be referenced first. Keep in mind this does only work for serializable instances</li> </ul>"},{"location":"Core%20Modules/Events/Data%20Event/#4-send-the-event-via-code","title":"4. Send the Event via Code","text":"<ul> <li>Reference the Event and raise it with parameter if needed</li> </ul> <pre><code>[SerializeField] private SomeDataEvent someDataEvent;\n\nnewEmptyEvent.Raise(Something);\n</code></pre>"},{"location":"Core%20Modules/Events/Data%20Event/#5-react-to-the-event-via-code","title":"5. React to the Event via Code","text":"<ul> <li>Register the Event in OnEnable and Unregister it in OnDisable</li> <li>Reference the Event and react to it with parameter if needed</li> </ul> <pre><code>[SerializeField] private SomeDataEvent someDataEvent;\n\nprivate void OnEnable()\n{\n   someDataEvent.Register(OnSomeEvent);\n}\n\nprivate void OnDisable()\n{\n   someDataEvent.Unregister(OnSomeEvent);\n}\n\nprivate void OnSomeEvent(SomeData someData)\n{\n     // Add code here\n}\n</code></pre>"},{"location":"Core%20Modules/Events/Empty%20Event/","title":"Empty Event","text":"<p>How to create and use EmptyEvents.</p> <p>EmptyEvents are a powerful tool for sending events at runtime without any specific data attached. They provide a flexible way to communicate between different parts of your code or components within your Unity project. With EmptyEvents, you can trigger actions, update states, or synchronize behaviors without the need for explicit data exchange. Whether you want to create a simple event or establish complex event-driven systems, EmptyEvents offer a lightweight and efficient solution. This documentation will guide you through the process of creating and using EmptyEvents effectively, both through the Unity Inspector and code-based approaches.</p> <p>You can also Create your own typed EmptyEvent if needed.</p>"},{"location":"Core%20Modules/Events/Empty%20Event/#1-create-an-emptyevent-in-the-editor","title":"1. Create an EmptyEvent in the Editor","text":"<ul> <li>Right-click in the Project hierarchy and choose Create/PrototypingToolkit/Events/EmptyEvent</li> </ul>"},{"location":"Core%20Modules/Events/Empty%20Event/#2-name-the-event","title":"2. Name the Event","text":""},{"location":"Core%20Modules/Events/Empty%20Event/#3-set-up-the-event","title":"3. Set Up the Event","text":"<ul> <li>Choose a Domain Logic if needed</li> </ul> <ul> <li>The Lists in the Debug area will fill at runtime if there are any Listeners, this way they can be found in the Scene-Hierarchy</li> <li>The Event can also be raised at runtime for testing purposes</li> </ul>"},{"location":"Core%20Modules/Events/Empty%20Event/#4a-raise-the-event-in-the-inspector","title":"4a. Raise the Event in the Inspector","text":"<ul> <li>Use any UnityEvent field in the Inspector to Raise your Event (eg. Button.OnClick())</li> </ul>"},{"location":"Core%20Modules/Events/Empty%20Event/#4b-send-the-event-via-code","title":"4b. Send the Event via Code","text":"<ul> <li>Reference the Event and raise it if needed </li> </ul> <pre><code>[SerializeField] private EmptyEvent emptyEvent;\n\nnewEmptyEvent.Raise();\n</code></pre>"},{"location":"Core%20Modules/Events/Empty%20Event/#5a-react-to-the-event-in-the-inspector-with-emptyeventlistener","title":"5a. React to the Event in the Inspector with EmptyEventListener","text":""},{"location":"Core%20Modules/Events/Empty%20Event/#emptyeventlistener","title":"EmptyEventListener","text":"<p>The EmptyEventListener component enables easy event handling for EmptyEvents in Unity. By attaching it to a GameObject, you can define actions or behaviors that trigger when an EmptyEvent is raised. This decouples event senders and receivers, promoting modular and maintainable code. With the EmptyEventListener, you can seamlessly react to events without direct code coupling. This documentation guides you through the setup and usage of the EmptyEventListener component to handle EmptyEvents efficiently in your Unity project.</p> <ul> <li>Add the EmptyEventListener Component to any GameObject</li> <li>And add the wanted Reaction</li> </ul> <p></p> <p></p>"},{"location":"Core%20Modules/Events/Empty%20Event/#5b-react-to-the-event-via-code","title":"5b. React to the Event via Code","text":"<ul> <li>Reference the Event and react to it if needed</li> </ul> <pre><code>[SerializeField] private EmptyEvent newEmptyEvent;\n\nprivate void OnEnable()\n{\n   newEmptyEvent.Register(OnSomeEvent);\n}\n\nprivate void OnDisable()\n{\n   newEmptyEvent.Unregister(OnSomeEvent);\n}\n\nprivate void OnSomeEvent()\n{\n     // Add code here\n}\n</code></pre>"},{"location":"Core%20Modules/Events/Event%20Hub/","title":"Event Hub","text":"<p>The EventHub serves as a central manager for events in your project. It allows you to parse and manage events from specific paths and provides options for configuring logging and colors.</p> <p>You can either create one EventHub for the whole game or multiple based an your needs.</p>"},{"location":"Core%20Modules/Events/Event%20Hub/#see-also-domain-logic-to-create-your-own","title":"See also Domain Logic to create your own","text":""},{"location":"Core%20Modules/Events/Event%20Hub/#1-create-an-eventhub","title":"1. Create an EventHub","text":"<p>To create an EventHub, follow these steps:</p> <ol> <li>In the Unity Editor, right-click in the Project window or within a desired folder.</li> <li>Select \"Create\" and navigate to \"EventHub\" to create a new EventHub asset.</li> <li>Give the EventHub a meaningful name.</li> </ol> <p></p>"},{"location":"Core%20Modules/Events/Event%20Hub/#2-setup","title":"2. Setup","text":"<p>After creating the EventHub, you need to set it up for event parsing and configuration. Follow these steps:</p> <ol> <li>Drag and drop the path from which you want to parse all the events into the \"Path\" field of the EventHub.</li> <li>Press the \"Parse All Events in Path\" button to initiate the parsing process. This will scan the specified path for events and populate the EventHub with the parsed Empty Events and Data Events.</li> </ol> <p></p> <ul> <li>Adjust the logging and color settings as per your requirements. These settings control if events are logged and the colors associated with them.</li> </ul> <p></p> <p>Feel free to customize the logging and color settings based on your project's needs.</p>"},{"location":"Feature%20Modules/Audio/Audio%20Data/","title":"Audio Data","text":"<p>Holds all the imported data related to audio</p> <p>Will be used by Audio Manager and Audio Data Manager Can also be used to have a reference to the Play AudioEvent and the Stop AudioEvent or the audio variables to react to its changes. </p> <p></p>"},{"location":"Feature%20Modules/Audio/Audio%20Data/#play-audioevent","title":"Play AudioEvent","text":"<p>Play AudioEvent is the basic Audio Event that comes with this Toolkit. -  It serves as a kind of channel for all the play audio events. -  It is also possible to create your own audio Event for that have a look at Create your own typed DataEvent</p>"},{"location":"Feature%20Modules/Audio/Audio%20Data/#stop-audioevent","title":"Stop AudioEvent","text":"<p>Stop AudioEvent is the basic Audio Event that comes with this Toolkit. -  It serves as a kind of channel for all the stop audio events. -  It is also possible to create your own audio Event for that have a look at Create your own typed DataEvent</p>"},{"location":"Feature%20Modules/Audio/Audio%20Event%20Data/","title":"Audio Events &amp; Audio Event Data","text":"<p>Audio Event Data is a SOs that holds audio clip(s) and corresponding settings.</p>"},{"location":"Feature%20Modules/Audio/Audio%20Event%20Data/#1-create-an-audio-event-data","title":"1. Create an Audio Event Data","text":"<ul> <li>Open the Create Asset Menu and Choose Audio Event Data or copy an existing one </li> </ul>"},{"location":"Feature%20Modules/Audio/Audio%20Event%20Data/#2-setup","title":"2. Setup","text":"<ul> <li>Choose the corresponding Audio Mixer Group</li> <li>Choose if it Loops Fades in oder Fades out</li> <li>Add Audio Clips and adjust <ul> <li>If multiple Clips are added Random Clips will be chosen on play</li> <li>Volume Pitch and Pan (If min and max are set Random Values will be chosen on play)</li> <li>Preview if needed</li> </ul> </li> </ul>"},{"location":"Feature%20Modules/Audio/Audio%20Event%20Data/#3b-raise-audio-events-via-inspector","title":"3b. Raise Audio Events via Inspector","text":"<ul> <li>Reference it in a Unity Event in the Inspector</li> </ul>"},{"location":"Feature%20Modules/Audio/Audio%20Event%20Data/#3b-raise-audio-events-via-code","title":"3b. Raise Audio Events via Code","text":"<ul> <li>Reference the Audio Data or the Play AudioEvent and the Stop AudioEvent in your script<ul> <li>(Hints:<ul> <li>Referencing the Audio Data makes it easier to debug who uses the Play AudioEvent</li> <li>It is also possible to create own Audio Events: Create your own typed DataEvent)</li> </ul> </li> </ul> </li> <li>And connect it to your logic</li> </ul> <pre><code>[Header(\"Data\")]  \n[SerializeField] private AudioData audioData;\n\n[SerializeField] private AudioEventData someAudio;\n\nprivate void PlaySomeAudio()  \n{  \n   audioData.PlayAudioEvent.Raise(someAudio);\n}\n</code></pre> <p>or</p> <pre><code>[Header(\"Data\")]  \n[SerializeField] private AudioEvent playAudioEvent;  \n[SerializeField] private AudioEvent stopAudioEvent;\n\n[SerializeField] private AudioEventData someAudio;\n\nprivate void PlaySomeAudio()\n{  \n   playAudioEvent.Raise(someAudio);\n}\n\nprivate void StopSomeAudio()\n{  \n   stopAudioEvent.Raise(someAudio);\n}\n</code></pre>"},{"location":"Feature%20Modules/Audio/Audio%20Manager/","title":"Audio Manager","text":"<p>The Audio Manger will listen to Play_AdioEvents and Stop_AdioEvents from the Audio Data in order to play them with the corresponding Audio Event Data send with it.</p>"},{"location":"Feature%20Modules/Audio/Audio%20Manager/#quick-setup","title":"Quick Setup","text":"<ul> <li>Drag and drop the AudioManager Prefab into your Scene and set it up<ul> <li>Check if AudioData and AudioEmitterPoolData are referenced</li> <li>Choose your initial Pool size</li> <li>In the Debug Area can be seen which AudioEmitter are currently used</li> </ul> </li> </ul> <ul> <li>Now you are ready to raise Audio Events and send Audio Event Data with it and the Audio Manager will play the Audio Clip</li> </ul>"},{"location":"Feature%20Modules/Cameras/Cameras/","title":"Cameras","text":""},{"location":"Feature%20Modules/Cameras/Cameras/#camera-types","title":"Camera Types","text":"<p>The Prototyping Toolkit offers a versatile collection of camera types to enhance your gameplay experiences. Whether you're creating an immersive first-person exploration game, a strategic real-time strategy (RTS) game, or a classic 2D platformer, the toolkit provides a range of camera options to suit your needs.</p>"},{"location":"Feature%20Modules/Cameras/Cameras/#first-person-camera","title":"First Person Camera","text":"<p>The First Person Camera provides an immersive perspective that places the viewer directly in the game world. It simulates the feeling of seeing through the eyes of the player, offering a highly engaging and personal experience. This camera type is commonly used in first-person shooters, adventure games, and exploration-based experiences.</p>"},{"location":"Feature%20Modules/Cameras/Cameras/#third-person-camera","title":"Third Person Camera","text":"<p>The Third Person Camera offers an external viewpoint positioned behind and slightly above the focal point. It allows players to observe the game world from a different perspective, providing a broader view of the environment. This camera type is often used in action-adventure games, open-world games, and platformers.</p>"},{"location":"Feature%20Modules/Cameras/Cameras/#isometric-camera","title":"Isometric Camera","text":"<p>The Isometric Camera provides a distinctive top-down perspective with a fixed 45-degree angle. It offers a unique blend of depth and simplicity, creating a 2.5D effect that is visually appealing. Isometric cameras are commonly used in strategy games, simulation games, and puzzle games.</p>"},{"location":"Feature%20Modules/Cameras/Cameras/#top-down-camera","title":"Top-Down Camera","text":"<p>The Top-Down Camera offers a direct overhead view, looking straight down on the game world. It provides a comprehensive view of the environment and allows players to strategize, plan, and navigate with precision. This camera type is popular in strategy games, puzzle games, and top-down shooters.</p>"},{"location":"Feature%20Modules/Cameras/Cameras/#side-scroller-camera","title":"Side Scroller Camera","text":"<p>The Side Scroller Camera is specifically designed for 2D platformers and side-scrolling games. It follows the action horizontally, allowing players to navigate through levels while maintaining a consistent view. This camera type emphasizes horizontal movement and level design, often seen in classic platforming experiences.</p>"},{"location":"Feature%20Modules/Cameras/Cameras/#rts-real-time-strategy-camera","title":"RTS (Real-Time Strategy) Camera","text":"<p>The RTS Camera is tailored for real-time strategy games, providing a bird's-eye view of the game world. It allows players to oversee and control the gameplay, manage units, and make strategic decisions. This camera type is essential for overseeing large-scale battles, commanding units, and exploring the map.</p>"},{"location":"Feature%20Modules/Cameras/Cameras/#how-to-use","title":"How to Use","text":"<ol> <li> <p>Drag and drop the Camera Prefab of your choice into your Scene or Prefab. Make sure to place it where you want the camera to be positioned.</p> </li> <li> <p>Unpack the prefab if needed. This step is necessary if you want to modify the camera settings or components directly.</p> </li> <li> <p>Place the target at the appropriate position in the Scene hierarchy. The camera will follow and focus on this target. Adjust the target's transform properties to control its position, rotation, and scale.</p> </li> <li> <p>Adjust the Settings:</p> <ul> <li>For the camera using Cinemachine, you can fine-tune its behavior and properties by modifying the Cinemachine Settings. This allows you to control aspects such as camera movement, tracking, and transitions.</li> <li>For the RTS (Real-Time Strategy) camera, you will also need to adjust the RTS_Camera_settings   asset. This asset contains specific settings for the RTS camera, such as zoom levels, rotation limits, and panning speed.   You can create a new asset using the \"Create Asset\" menu (Create/PrototypingToolkit/Cameras/RTS Camera Settings) or make a copy of the existing asset to customize it according to your needs.</li> </ul> </li> </ol> <p>Feel free to experiment with the camera settings and iterate on them to achieve the desired camera behavior for your game.</p>"},{"location":"Feature%20Modules/Options/Audio%20Options/","title":"Audio Options","text":""},{"location":"Feature%20Modules/Options/Audio%20Options/#audio-data-manager","title":"Audio Data Manager","text":"<p>The Audio Data Manager is a Prefab and will make sure that changes to the Audio Data Variables via Inspector or ingame in the Audio Options are handled and manipulate the Audio Mixer.</p>"},{"location":"Feature%20Modules/Options/Audio%20Options/#audio-slider","title":"Audio Slider","text":"<p>The Audio Slider is a UI prefab that allows to change Volume Float Variables</p> <ul> <li>Drag and drop it in a Canvas in the Scene and set which value is going to be changed by the Slider</li> </ul> <p></p>"},{"location":"Feature%20Modules/Options/Audio%20Options/#audio-toggle","title":"Audio Toggle","text":"<p>The Audio Toggle is a UI prefab that allows to toggle Audio Bool Variables</p> <ul> <li>Drag and drop it in a Canvas in the Scene and set which value is going to be changed by the Toggle</li> </ul> <p></p>"},{"location":"Feature%20Modules/Options/Controls%20Options/","title":"Controls Options","text":""},{"location":"Feature%20Modules/Options/Controls%20Options/#input-rebind-data","title":"Input Rebind Data","text":"<p>Holds all the imported data related to input rebinds</p> <ul> <li>events and current rebinding operation states</li> </ul>"},{"location":"Feature%20Modules/Options/Controls%20Options/#advanced-input-rebind-popup","title":"Advanced Input Rebind Popup","text":"<p>The Advanced Input Rebind Popup is a UI prefab that allows to give rebind feedback Gives rebinding operations the options to either:</p> <ul> <li>Cancel</li> <li>Re-Capture</li> <li>or Accept</li> </ul> <p>the rebinding</p> <p>Drag and drop one Prefab into your canvas, no need for a setup. Input Rebind Element will communicate changes and activate the Input Rebind Popup is needed.</p>"},{"location":"Feature%20Modules/Options/Controls%20Options/#input-rebind-element","title":"Input Rebind Element","text":"<p>The Advanced Input Rebind Popup is a UI prefab that gives the option to rebind InputAction References.</p> <p>Drag and drop the Prefab into your canvas (as many as you need) and set it up:</p> <ul> <li>Set the corresponding Input Action</li> <li>and the corresponding Binding</li> <li>change the key-text to the actual key which will be changed under the Settings section:</li> </ul> <p></p> <p>You need to have an InputAction Map with Actions and Bindings.</p>"},{"location":"Other%20Modules/ScriptTemplates/Script%20Templates/","title":"Script Templates","text":"<p>Those Scripts are here to help you faster create scripts/classes within Unity.</p> <p>This also shows how they look and can be created on their own.</p> <p>Adjust those Scripts to your liking and what works best for you.</p> <p></p> Category Class Description Unity Scripts Behaviour Base class for script components attached to GameObjects. ScriptableObject Base class for creating assets with serialized data. Controller Class that handles input and controls game behavior. Manager Class that manages specific game systems or functionalities. Classes Class Basic unit of code organization. Serializable Class Class that can be serialized and stored in various formats. Abstract Class Class that cannot be instantiated but serves as a base for others. Interface Contract that defines a set of methods and properties. Toolkit Classes Empty Event Event without any specific data payload. Data Event Event with a specific data payload. Selection Class that handles selection of objects. Runtime Set Collection of objects that can be dynamically modified at runtime. State Class that represents a specific state in a state machine. StateMachine Monobehaviour that represents a StateMachine. <p>After creating one of those Scripts:</p> <ul> <li>adjust Namespace</li> <li>adjust menuName or fileName if its a ScriptableObject</li> <li>adjust fields</li> <li>remove unused methods</li> </ul> <p>Example for ScriptableObject:</p> <pre><code>using UnityEngine;  \n\nnamespace Logic  \n{  \n   [CreateAssetMenu(\n   fileName = \"newSomeData\",\n   menuName = \"Features/FeatureA/SomeData\")]\n   public class SomeData : ScriptableObject  \n   {\n      [Header(\"Data\")]\n      [SerializeField] private ScriptableObject data;\n\n      public ScriptableObject Data =&gt; data;\n\n      private void OnEnable()\n      {\n\n      }\n\n      private void OnDisable()  \n      {\n\n      }  \n   }\n}\n</code></pre>"}]}